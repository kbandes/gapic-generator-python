{% macro api_method_pb2(name, request, response, http_options) %}
{# Generate a method with pb2-style (not proto+) input and output messages. #}
    def _{{ name }}(
        self,
        request: {{ request }},
        *,
        retry: OptionalRetry = gapic_v1.method.DEFAULT,
        timeout: Optional[float] = None,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> {{ response }}:
        r"""Call the {{ name }} method over HTTP.

        Args:
            request ({{ request }}):
                The request object.

            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            {{ response }}: the response object

        """

        http_options = [
            {% for rule in http_options %}
            {
                'method': '{{ rule.method }}',
                'uri': '{{ rule.uri }}',
                {% if rule.body %}
                'body': '{{ rule.body }}',
                {% endif %}
            },
            {% endfor %}
        ]


        request_kwargs = json_format.MessageToDict(
            request,
            preserving_proto_field_name=True,
            including_default_value_fields=True,
        )
        transcoded_request = path_template.transcode(http_options, **request_kwargs)

        uri = transcoded_request["uri"]
        method = transcoded_request["method"]

        # Jsonify the query params
        query_params_request = {{ request }}()
        json_format.ParseDict(transcoded_request["query_params"], query_params_request)
        query_params = json_format.MessageToDict(
            query_params_request,
            including_default_value_fields=False,
            preserving_proto_field_name=False,
            use_integers_for_enums=False,
        )

        # Send the request
        headers = dict(metadata)
        headers["Content-Type"] = "application/json"
        response = getattr(self._session, method)(
            "https://{host}{uri}".format(host=self._host, uri=uri),
            timeout=timeout,
            headers=headers,
            params=rest_helpers.flatten_query_params(query_params),
        )

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)

        # Return the response
        api_response = {{ response }}()
        json_format.Parse(response.content, api_response, ignore_unknown_fields=False)
        return api_response


{% endmacro %}

{% macro api_property_pb2(name, request, response) %}

    @property
    def {{ name }}(
        self,
    ) -> Callable[[{{ request }}], {{ response }}]:
        r"""Return a callable for the {{ name }} method over rest.
        Returns:
        Callable[[{{ request }}],
            {{ response }}]:
           A function that, when called, will call the underlying RPC 
           on the server.
        """
        return self._{{ name }}


{% endmacro %}
